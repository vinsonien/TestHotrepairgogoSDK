apply plugin: 'com.android.application'
apply from: 'tinkerpatch.gradle'
//apply tinker插件
//apply plugin: 'com.tencent.tinker.patch'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.test.sdk.hotrepairgogo"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        debug {
            keyAlias 'debugalias'
            keyPassword '8dsd9ln4ut'
            storeFile file('./keystore/dcpappdebug.keystore')
            storePassword 'sjfh38jkhk9'
        }
        release {
            keyAlias 'releasealias'
            keyPassword 'j7kc0m2f51'
            storeFile file('./keystore/dcpapprelease.keystore')
            storePassword 'yk483k73nbz'
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            // true - 打开资源压缩
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            // 自定义包名
            applicationVariants.all { variant ->
                variant.outputs.all { output ->

                    // test_版本号_yyyymmdd_release.apk
                    def fileName = "TestHotrepair_v${variant.versionName}.apk"
                    def outFile = output.outputFile

                    //删除之前生成的apk
                    def outputDir = project.buildDir.absolutePath + "/outputs/apk/release/";
                    def outputDirFile = new File(outputDir + fileName);
                    if (outputDirFile.exists()) {
                        outputDirFile.delete();
                    }

                    if (outFile != null && outFile.name.endsWith('.apk')) {
                        outputFileName = fileName
                    }
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation project(path: ':hotrepairgogo')

    implementation "com.android.support:multidex:1.0.1"

//    compileOnly("com.tinkerpatch.tinker:tinker-android-anno:1.9.14")
//    implementation("com.tinkerpatch.sdk:tinkerpatch-android-sdk:1.2.14")
}
